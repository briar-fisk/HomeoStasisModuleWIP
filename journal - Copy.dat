
Fri 09/15/2023  2:38:55.40:
   Decided to do two tables for goal seeking parameters. One for single value goals and one with a range. This is so you can separate things that need fine tuning all the time from those who can be a little more lax.

Fri 09/15/2023  2:39:02.80:
   Implemented those tables.

Fri 09/15/2023  2:39:38.84:
   Adding settings, starting with adaptive vs fixed. Adaptive meaning it trains as it runs, and fixed means it is locked into the initial training set.

Fri 09/15/2023  3:46:42.62:
   Updated the update function to handle training vs prediction, and the setting_Adaptive_Or_Fixed

Fri 09/15/2023  3:47:31.31:
   Skeleton of the update_Prediction is outlined, working on implementing compile_Delta_Targets. Have to pack up for now so uploading progress.

Fri 09/15/2023  3:49:14.73:
   Oh yeah, added journal.bat so I can use it to keep track of these comments

Fri 09/15/2023 17:11:56.68:
   Added Goal_Target_Type so when calculating the delta we know which target table to reference for the metric.

Fri 09/15/2023 17:20:49.49:
   Ripped out the int vs float state types. The module uses purely float now.

Fri 09/15/2023 17:25:06.31:
   I realize using tables to handle all data is overkill and wasteful, will not be that way in the full implementation. Vectors would probably do the same job but I've never used them, autodidactic learning leaves gaps.

Fri 09/15/2023 17:26:28.35:
   Spending years working with dynamically allocating memory and making sure you're not leaking like a stabbed man gives you a good handle on memory management, I regret nothing. Though I will learn vectors for the real implementation.

Fri 09/15/2023 20:03:19.75:
   Went for a walk and thought it over, going to change the prediction model. Instead of predicting from the current state forward we will calculate the deltas needed and work backwards to find the changes in controls needed to bring the system into alignment.

Fri 09/15/2023 20:10:36.96:
   Calculate_Goal_Deltas() is done. Unlike the deltas calculated from the input, these are inverse in that they determine changes needed, not changes made. So if the current is less than the goal it is 2.0 indicating it needs to increase.

Sat 09/16/2023  3:26:43.27:
   Going to change to only range based goal seeking, for 'precision' ones we can just reduce the range to a tiny window.

Sat 09/16/2023  4:21:04.75:
   Added a Specific_Goal_Target to use for searching for optimal solutions. The range can't be read in as the raw goal networks only accept one value plus delta, so we have a specific value within the target range that is used as the concrete value.

Sat 09/16/2023  5:05:17.54:
   Done with entering goals into the raw, now to figure out the charging.

Sat 09/16/2023  6:18:24.79:
   Oh yeah, added a loop to read in 100 iterations of the sim so I had some traces to play with.

Sat 09/16/2023  6:24:09.26:
   Raw trace selection based on delta alignment with goals is complete. Now to read them into MSC, looks like the old engine can handle this through aux charging input buffers.

Sat 09/16/2023  6:26:07.85:
   Charging the goals in the raw tier is done, forgot to add that, done before the trace selection as traces are selected from the charged raw tbh_Pattern_Output_C.

Sat 09/16/2023 23:02:09.51:
   Changed the get_Current_Treetop() to return the NID.NR instead of the address of the node.

Sat 09/16/2023 23:31:47.19:
   When reading the node from raw to MSC it is salted, in the production version this will be converted to an MSC which uses different state trees for each input index.

Sun 09/24/2023  1:42:34.61:
   Added salts to the Raw constructs to differentiate between treetops. 

Sun 09/24/2023  1:47:24.68:
   Added c_NT3_Construct_1D.output_Output_Tables_MSC();

Sun 09/24/2023  1:55:51.87:
   Raw treetops are now read into the MSC as salted values based on their raw ID, allows for charging MSC to get the treetops to feed the Chrono.

Sun 09/24/2023  2:21:04.30:
   Added gather_MSC_Treetops()

Sun 09/24/2023  2:22:27.80:
   Added charge_Chrono_Seek_Past()

Sun 09/24/2023  2:24:18.82:
   Upon waking start on the backprop to then do trace selection to get efferent sets of actuator control

Sun 09/24/2023 22:27:44.50:
   Dropped the action potential threshold in the MSC to 0.0 to let all charges through it. A1S2 may be used or FTL instead of A1S1 in the next iteration.

Sun 09/24/2023 22:27:59.16:
   Added Efferent_Prediction_Traces and Efferent_Prediction

Sun 09/24/2023 23:31:11.14:
   Need to rewrite the discharging functions, currently gathers from the Charging_Buffers, need it to take the output treetops in tbl_Treetops_Output_C and discharge them.

Mon 09/25/2023 19:06:00.65:
   Added bp_Given_Cell so that the MSC can be backpropped into rows and cells based on their chrono position for retrieval

Mon 09/25/2023 19:15:36.22:
   Alrighty, can now gather the MSC traces for desalting and bp through the raw as well, needs the charges and RC added to the output later.

Tue 09/26/2023  0:17:05.89:
   discharge_Raw_Goal is working, the output is beautiful

Tue 09/26/2023  1:10:24.84:
   Discharging works down to the raw_Goal and raw_Feedback, but there is a misalignment somewhere.

Tue 09/26/2023 12:51:04.75:
   In the testdataset swapped the indexes of the feedback from 0-heater 1-o2 to 0-o2 1-heater, it was backwards and likely cause of misalignment in backpropagated traces, investigation continues after daily distractions

Tue 09/26/2023 13:25:40.75:
   HHUUURRHHRHR alignment fixed! Validated by hand, done

Tue 09/26/2023 17:13:39.83:
   Moved the output for the otables during backpropagation to output_BPOTables()
